diff --git a/fs/fat/dir.c b/fs/fat/dir.c
index 8e100c3bf7..5032066 100644
--- a/fs/fat/dir.c
+++ b/fs/fat/dir.c
@@ -17,6 +17,7 @@
 #include <linux/compat.h>
 #include <linux/uaccess.h>
 #include <linux/iversion.h>
+#include <linux/mount.h>
 #include "fat.h"
 
 /*
@@ -783,6 +784,158 @@ static int fat_ioctl_readdir(struct inode *inode, struct file *file,
 	return ret;
 }
 
+static int change_vol_label_in_boot_sector(
+	struct inode *inode, sector_t sector, const char *new_label, sector_t *backup)
+{
+	int err = 0;
+	struct buffer_head *bh = NULL;
+	struct fat_boot_sector *b = NULL;
+	struct super_block *sb = NULL;
+	
+	if (!inode || !new_label || !backup) {
+		return -EINVAL;
+	}
+	
+	sb = inode->i_sb;
+	bh = sb_getblk(sb, sector);
+        if (bh == NULL) {
+                printk("eu20 unable to read boot sector");
+                return -EINVAL;
+        }
+
+        b = (struct fat_boot_sector*)bh->b_data;
+        if (MSDOS_SB(sb)->fat_bits == 32) { 
+                strncpy(b->fat32.vol_label, new_label, MSDOS_NAME);
+		*backup = b->fat32.backup_boot;
+        }
+        else {
+                strncpy(b->fat16.vol_label, new_label, MSDOS_NAME);
+		*backup = EOF_FAT16;
+        }
+	printk("eu20 backup %d\n", (int)*backup);
+
+        mark_buffer_dirty(bh);
+        if (IS_DIRSYNC(inode)) {
+		err = sync_dirty_buffer(bh);
+	}
+        brelse(bh);
+        
+	return err;
+}
+
+static int change_vol_label_in_boot_sectors(struct inode *inode, const char *new_label)
+{
+	sector_t backup = 0;
+	int err = 0;
+	struct super_block *sb = NULL;
+	struct msdos_sb_info *sbi = NULL;	
+	
+	if (!inode || !new_label) {
+		return -EINVAL;
+	}
+	sb = inode->i_sb;
+	sbi = MSDOS_SB(sb);
+	mutex_lock(&sbi->s_lock);
+
+	// First change the boot sector (sector 0)
+	err = change_vol_label_in_boot_sector(inode, 0, new_label, &backup);
+	if (err || backup == EOF_FAT16) {
+		goto unlock;
+	}
+	
+	// Change also the backup boot sector
+	err = change_vol_label_in_boot_sector(inode, backup, new_label, &backup);
+
+unlock:
+	mutex_unlock(&sbi->s_lock);
+	return err;
+}
+
+static int change_root_dir_label(struct file *file, const char* new_label)
+{
+	loff_t pos = 0;
+	int err = 0;
+	struct buffer_head *bh = NULL;
+	struct msdos_dir_entry *de = NULL;
+	struct inode *inode = NULL;
+	
+	if (!file || !new_label) {
+		return -EINVAL;
+	}
+	
+	err = mnt_want_write_file(file);
+	if (err) {
+		return err;
+	}
+	
+	inode = file_inode(file); 
+	inode_lock(inode);
+	
+	if (fat_get_entry(inode, &pos, &bh, &de) == -1) {
+		printk("eu20 not a FAT directory\n");
+		err = -EINVAL;
+		goto unlock;
+	}
+	
+	if (!(de->attr & ATTR_VOLUME)) {
+		printk("eu20 not a FAT main directory");
+		err = -EINVAL;
+		goto clean;
+	}
+	
+	strncpy(de->name, new_label, MSDOS_NAME);
+	mark_buffer_dirty_inode(bh, inode);
+	if (IS_DIRSYNC(inode)) {
+		err = sync_dirty_buffer(bh);
+	}
+clean:
+	brelse(bh);
+
+unlock:
+	inode_unlock(inode);
+	mnt_drop_write_file(file);
+	return err;
+}
+
+
+static long
+set_volume_label_ioctl(struct file *file, unsigned long ioctl_param)
+{
+        int ret = 0;
+        char new_label[MSDOS_NAME] = {0};
+	struct inode *inode = NULL;
+	
+	if (!file) {
+		return -EINVAL;
+	}
+	
+	inode = file_inode(file);	
+	if (inode->i_ino != MSDOS_ROOT_INO) {
+		printk("eu20 not a fat root directory\n");
+		return -EBADF;
+	}
+
+        if (copy_from_user((void *)&new_label, (void *)ioctl_param, MSDOS_NAME))
+                return  -ENOMEM;
+
+	// Change boot sector 
+        ret = change_vol_label_in_boot_sectors(inode, (char*)&new_label);
+        if (ret) {
+                printk("eu20 Failed changing boot sector %d\n", ret);
+                return ret;
+        }
+        
+	// Change root dir volume label
+	ret = change_root_dir_label(file, (char*)&new_label);
+        if (ret) {
+		printk("eu20 Failed changing root dir label %d\n", ret);
+		return ret;
+        }
+	printk("finished eu20 ioctl %s\n", new_label);
+        return ret;
+}
+
+
 static long fat_dir_ioctl(struct file *filp, unsigned int cmd,
 			  unsigned long arg)
 {
@@ -799,6 +952,8 @@ static long fat_dir_ioctl(struct file *filp, unsigned int cmd,
 		short_only = 0;
 		both = 1;
 		break;
+	case FAT_IOCTL_SET_VOLUME_LABEL:
+		return set_volume_label_ioctl(filp, arg);
 	default:
 		return fat_generic_ioctl(filp, cmd, arg);
 	}
diff --git a/include/uapi/linux/msdos_fs.h b/include/uapi/linux/msdos_fs.h
index fde7537..17e33d0 100644
--- a/include/uapi/linux/msdos_fs.h
+++ b/include/uapi/linux/msdos_fs.h
@@ -109,6 +109,8 @@ struct __fat_dirent {
 #define FAT_IOCTL_SET_ATTRIBUTES	_IOW('r', 0x11, __u32)
 /*Android kernel has used 0x12, so we use 0x13*/
 #define FAT_IOCTL_GET_VOLUME_ID		_IOR('r', 0x13, __u32)
+#define FAT_IOCTL_SET_VOLUME_LABEL      _IOW('r', 0x14, char[MSDOS_NAME])
+
 
 struct fat_boot_sector {
 	__u8	ignored[3];	/* Boot strap short or near jump */
