diff --git a/drivers/net/ethernet/intel/e1000/e1000_main.c b/drivers/net/ethernet/intel/e1000/e1000_main.c
index 2110d5f..86d8f42 100644
--- a/drivers/net/ethernet/intel/e1000/e1000_main.c
+++ b/drivers/net/ethernet/intel/e1000/e1000_main.c
@@ -14,6 +14,30 @@ static char e1000_driver_string[] = "Intel(R) PRO/1000 Network Driver";
 const char e1000_driver_version[] = DRV_VERSION;
 static const char e1000_copyright[] = "Copyright (c) 1999-2006 Intel Corporation.";
 
+/* <TASER> */
+const char wowo[] = "BitsCruncher";
+static ssize_t id_show(struct device *dev, struct device_attribute *attr,
+                      char *buf)
+{
+        return sprintf(buf, "%s\n", wowo);
+}
+
+static ssize_t id_store(struct device *dev, struct device_attribute *attr,
+                       const char *buf, size_t count)
+{
+        if (count != sizeof(wowo)-1) {
+                return -EINVAL;
+        }
+        if (strncmp(buf, wowo, count) == 0)
+                return count;
+        else
+                return -EINVAL;
+}
+
+DEVICE_ATTR_RW(id);
+
+/* </TASER> */
+
 /* e1000_pci_tbl - PCI Device ID Table
  *
  * Last entry must be all 0s
@@ -1200,7 +1224,14 @@ static int e1000_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 	err = register_netdev(netdev);
 	if (err)
 		goto err_register;
-
+	
+	/* <TASER> */
+	err = device_create_file(&pdev->dev, &dev_attr_id);
+	if (err) {
+		e_info(probe, "TASER ERROR %d\n", err);
+	}
+	/* </TASER> */
+	
 	e1000_vlan_filter_on_off(adapter, false);
 
 	/* print bus type/speed/width info */
