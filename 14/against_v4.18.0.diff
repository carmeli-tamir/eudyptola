diff --git a/fs/proc/base.c b/fs/proc/base.c
index aaffc0c..c01ccd9 100644
--- a/fs/proc/base.c
+++ b/fs/proc/base.c
@@ -550,6 +550,16 @@ static const struct limit_names lnames[RLIM_NLIMITS] = {
 	[RLIMIT_RTTIME] = {"Max realtime timeout", "us"},
 };
 
+static int proc_id_status(struct seq_file *m, struct pid_namespace *ns,
+                           struct pid *pid, struct task_struct *task)
+{
+	if (!task) {
+		return -ESRCH;
+	}
+	seq_printf(m, "%lld\n", atomic64_read(&task->eudyptola_id));
+	atomic64_inc(&task->eudyptola_id);
+}
+
 /* Display limits for a process */
 static int proc_pid_limits(struct seq_file *m, struct pid_namespace *ns,
 			   struct pid *pid, struct task_struct *task)
@@ -2910,6 +2920,7 @@ static const struct pid_entry tgid_base_stuff[] = {
 #endif
 	REG("environ",    S_IRUSR, proc_environ_operations),
 	REG("auxv",       S_IRUSR, proc_auxv_operations),
+	ONE("id",    	  S_IRUGO, proc_id_status),
 	ONE("status",     S_IRUGO, proc_pid_status),
 	ONE("personality", S_IRUSR, proc_pid_personality),
 	ONE("limits",	  S_IRUGO, proc_pid_limits),
diff --git a/include/linux/sched.h b/include/linux/sched.h
index 43731fe..5be80ca 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -607,6 +607,7 @@ struct task_struct {
 	 */
 	randomized_struct_fields_start
 
+        atomic64_t			eudyptola_id;
 	void				*stack;
 	atomic_t			usage;
 	/* Per task flags (PF_*), defined further below: */
diff --git a/kernel/fork.c b/kernel/fork.c
index 1b27bab..cabbb3e 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -1665,6 +1665,8 @@ static __latent_entropy struct task_struct *copy_process(
 	if (!p)
 		goto fork_out;
 
+	atomic64_set(&p->eudyptola_id, 0x010203040506);
+
 	/*
 	 * This _must_ happen before we call free_task(), i.e. before we jump
 	 * to any of the bad_fork_* labels. This is to avoid freeing
